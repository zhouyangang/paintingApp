Section 1: 数据存储
1.1 非数据库存储
  （1）用户头像 -- 数据存储1.1
      用户头像以图片文件的形式存储
      相对路径：项目根目录/profile/img
      用户头像文件的文件名是用户表（数据存储2.1）中，对应用户的ID
  
  （2）书画作品 -- 数据存储1.2
      用户作品以图片文件的形式存储
      相对路径: 项目根目录/work/img
      用户作品文件的文件名是作品表中（数据存储2.2），该作品对应的ID
  

1.2 关系数据库数据表
  （1）用户表 表名：user_info -- 数据存储2.1
      ID:   id 
      账号:	login_name 
      密码:  login_pwd
      注册时间:        register_time
      用户头像存储路径: profile_path
  
  （2）作品表 表名：work_info -- 数据存储2.2
      ID:       id  
      作品名称:  work_name
      点赞数量: 	like_num 
      收藏数量:  inv_num
      作品上传时间:  upload_time
      作品存储路径:  work_path
      作品的描述信息: work_description
  
  （3）用户上传的作品 表名：possess_info -- 数据存储2.3
      存储用户与其上传作品的关系
      ID:       id
      User_ID:  user_info.id  
      作品ID:   work_info.id
  
  （4）用户赞的作品 表名：like_info -- 数据存储2.4
      存储用户与其点赞作品的关系
      ID：  		id
      User_ID：	user_info.id  
      作品ID：   work_info.id
  
  （5）用户收藏的作品 表名：collect_info -- 数据存储2.5
      存储用户与其收藏作品的关系
      ID：     	id
      User_ID：	user_info.id  
      作品ID：   work_info.id

  （6）用户与作品的评论关系 表明：comment_info -- 数据存储2.6
       存储用户对作品的评论
      ID:       id
      User_ID:  user_info.id
      作品ID：   work_info.id
      评论时间：  comment_time
      评论内容：  comment




Section 2: 数据层封装方法
2.1 存储文件的操作

2.2 数据表的操作
  （1）用户表 表名：user_info
     用户信息实例类 user_info_entity：表user_info中的一条记录
     a. user_info_entity find_user_by_id(String user_id)
        根据用户id，返回用户信息实例类

     b. user_info_entity find_user_by_name(String user_name)
        根据用户登录名，返回用户信息实例类


  （2）作品表 表名：work_info
     作品信息实例类 work_info_entity：表work_info中的一条记录
     a. work_info_entity find_work_by_id(String work_id)
        根据作品id，返回作品信息实例类

     b. work_info_entity find_work_by_name(String work_name)
        根据作品名称，返回作品信息实例类

     c. List<work_info_entity> find_work_as_demand(String work_id,
                                                   int num)
        对作品进行排序，从work_id的作品以后读出num个作品，组成List
        如果没有work_id,则work_id为最新的一个作品

      
  （3）用户上传的作品 表名：possess_info
     作者与作品关系实例类 possess_info_entity: 表possess_info中的一条记录
     a. possess_info_entity find_author(work_id)
        根据作品的id，返回表possess_info中符合条件的实例类

     b. List<possess_info_entity> find_work_by_author(user_id)
        根据作者的id，返回由该作者上传作品的id所代表的实例类组成的列表
        list保持最新的元素在最前面。


  （4）用户赞的作品 表名：like_info
     作者与作品点赞关系实例类 like_info_entity: 表like_info中的一条记录
     a. list<like_info_entity> who_likes(work_id)
        根据作品的id，返回有哪些用户喜欢该作品
        list保持最新的元素在最前面。

     b. List<like_info_entity> likes_what(user_id)
        根据用户的id，返回该用户喜欢了哪些作品
        list保持最新的元素在最前面。

  （5）用户收藏的作品 表名：collect_info
     作者与作品收藏关系实例类 collect_info_entity: 表collect_info中的一条记录
     a. list<collect_info_entity> who_collects(work_id)
        根据作品的id，返回有哪些用户收藏了该作品
        list保持最新的元素在最前面。

     b. List<like_info_entity> collects_what(user_id)
        根据用户的id，返回该用户收藏了哪些作品
        list保持最新的元素在最前面。

      
  （6）用户与作品的评论关系 表明：comment_info
     作者与作品评论关系实例类 comment_info_entity: 表comment_info中的一条记录
     a. list<collect_info_entity> who_comments(work_id)
        根据作品的id，返回有哪些用户评论了该作品
        list保持最新的元素在最前面。

     b. List<like_info_entity> commnets_what(user_id)
        根据用户的id，返回该用户评论了哪些作品
        list保持最新的元素在最前面。




Section 3: 业务层实现逻辑

所有的response body 统一格式如下：
{ 
	"status": "000",
	"message":null,
	"result": 
}
status		000:成功，001:失败
message		错误提示	
result		成功时，返回的业务数据

HTTP状态码，按照HTTP标准状态码，如下：
200		successful
400		bad request
500		Internal server exception


除了注册，登录的API，其他任何API，都需要在
HTTP请求的 header中携带 Authorization, 值为登录用户ID

3.1 账号
  （1）子功能点：账号注册	
      a. 注册账号
      b. API名称 
         	"/api/sign-up"	
      c. 是否需要登录：
         	否
      e. HTTP方法:
      		GET 
      f. 请求参数
       	phone		手机号
       	password	密码
      g. 返回HTTPP状态码。
         	成功： 200
         	失败： 400
      h. 返回内容
	统一Response Body
  
  （2）子功能点：登录	
      a. 输入用户名和密码登录
      b. API名称 
      		"/api/sign-in"	
      c. 是否需要登录：
      		否
      e. HTTP方法
      		POST
      f. 请求参数
         phone   	用户名
         passsword   	密码
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
{
  "status": "000",
  "message": null,
  "result":{
	id(Long)		用户ID      	
	profile_url(String)	用户头像
	gender(Int, 0:男，1:女)	性别
	alias(String)		昵称
	description(String)	介绍
	}
}


  （3）子功能点：注销	
      a. 取消登录
      b. API名称 
      		"/api/sign-out"	
      c. 是否需要登录：
      		否
      e. HTTP方法
      		GET
      f. 请求参数
      		无
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
    {
	"status":"000",
	"message":null,
	"result":null
    }


  （4）子功能点：上传用户信息	
      a. 新建一个用户信息
      b. API名称 
      		"/api/artists/profile"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		PUT
      f. 请求参数 request body
	gender(Int, 0:男，1:女)	性别
	alias(String)		昵称
	description(String)	介绍
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
      {
	"status":"000",
	"message":null,
	"result":null
      }

  （5）子功能点：获取用户信息			
      a. 获取用户性别，昵称等信息
      b. API名称 
      		"/api/artists/profile"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		GET
      f. 请求参数
      		无
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
 {
  "status": "000",
  "message": null,
  "result":{
	id(Long)		用户ID      	
	profile_url(String)	用户头像
	gender(Int, 0:男，1:女)	性别
	alias(String)		昵称
	description(String)	介绍
	}
}

  （6）子功能点：上传用户头像			
      a. 向服务器上传头像
      b. API名称 
      		"/api/avatars/upload"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		GET
      f. 请求参数
      		用户头像图片
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
{
	"status":"000",
	"message":null,
	// result为 用户头像的URL
	"result":"http://xxxxx"
}

3.2 书画作品浏览
  （1）子功能点：浏览搜索书画作品	      
      a. 获取全部的作品信息，包括作品名称，发布人信息，评论数，点赞数等	
      b. API名称 
      		"/api/works/page/"	
      c. 是否需要登录：
      		否
      e. HTTP方法
      		GET
      f. 请求参数
      	page(Int)		当前页码(从1开始)
	size(Int)		每页条数
	type(Int)		获取的作品类型

		1:	本人作品
		2:	赞过的作品
		3:	收藏的作品
	work-name(String)	作品名称，可以模糊匹配
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
{
	"status": "000",
	"message":null,
	"result": {
		"totalRows": 总行数
		"totalPage": 总页数
		"currentPage": 当前页码
		"numPerPage": 一页显示的记录数
		"resultList":[
			{
			"ID"(Long)      	作品id  
			"author"(String)	作品作者昵称
      			"work_name"(String)	作品名称	
      		 	"like_num"(Int)		点赞数量
       			"inv_num"(Int)		收藏数量
      		  	"upload_time"(String)   作品上传时间  日期格式： 2017-07-31 08:00:00
      		  	"work_path"(String)	作品存储url
      			"work_description"(String) 作品的描述信息
			}
			......
		]
	}
}
 

  （2）子功能点：浏览书画作品详情		
      a. 大图方式浏览作品，并可以查看和添加评论
      b. API名称 
      		"/api/works/{workID}"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		GET
      f. 请求参数
      	workID		作品的ID
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
{
	"status":"000",
	"message":null,
	"result": {
			"ID"(Long)      	作品id  
			"author"(String)	作品作者昵称 
     			"work_name"(String)	作品名称	
      		 	"like_num"(Int)		点赞数量
       			"inv_num"(Int)		收藏数量
      		  	"upload_time"(String)   作品上传时间  日期格式： 2017-07-31 08:00:00
      		  	"work_path"(String)	作品存储url
      			"work_description"(String) 作品的描述信息
			"comments": [
				{
				   "username"(String)	评论人
				   "comment"(String)	评论
				},
				.....
			]
	}
}


3.3 作品发布
  （1）子功能点：发布作品			
      a. 上传一张作品，并配备文字说明
      b. API名称 
      		"/api/works"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		POST
      f. 请求参数

      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
      		作品列表

  （2）子功能点：上传图片			
      a. 上传一张图片
      b. API名称 
      		"/api/pictures/upload"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      		POST
      f. 请求参数
      		作品图片
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


3.4 点评作品
  （1）子功能点：收藏作品				
      a. 对作品进行收藏
      b. API名称 
      		"/api/collect"	
      c. 是否需要登录：
      		是
      e. HTTP方法：
      		POST
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （2）子功能点：取消收藏			
      a. 取消收藏
      b. API名称 
      		"/api/collect"	
      c. 是否需要登录：
      		是
      e. HTTP方法：DELETE
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （3）子功能点：评论作品			
      a. 给作品添加评论
      b. API名称 
      		"/api/comment"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （4）子功能点：喜欢				
      a. 点赞
      b. API名称 
      		"/api/like"	
      c. 是否需要登录：
      		是
      e. HTTP方法：
      		POST
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （5）子功能点：取消喜欢		
      a. 取消点赞
      b. API名称 
      		"/api/like"	
      c. 是否需要登录：
      		是
      e. HTTP方法：
      		DELETE
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


3.5 查看用户
  （1）子功能点：用户信息浏览			
      a. 略
      b. API名称 
      		"/api/artists/" + id + "/profile"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （2）子功能点：浏览用户发布的作品		 	
      a. 略
      b. API名称 
      		"/api/artists/+id/works"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （3）子功能点：浏览用户收藏的作品		 	
      a. 略
      b. API名称 
      		"/api/artists/+id/collect"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容


  （4）子功能点：浏览用户喜欢的作品		 	
      a. 略
      b. API名称 
      		"/api/artists/+id/likes"	
      c. 是否需要登录：
      		是
      e. HTTP方法
      f. 请求参数
      g. 返回HTTPP状态码。
         成功： 200
         失败： 400
      h. 返回内容
